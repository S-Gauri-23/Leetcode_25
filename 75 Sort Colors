# 75 Sort Colors

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]
 
Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

Follow up: Could you come up with a one-pass algorithm using only constant extra space?

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Code:

Approach 1: counting approach

class Solution {
    public void sortColors(int[] nums) {
        int k = 0;
        int oneCounter = 0;
        int twoCounter = 0;

        for(int i=0; i<nums.length; i++){
            if(nums[i] == 0){
                nums[k++] = nums[i];
            }
            else if(nums[i] == 1){
                oneCounter++;
            }
            else if(nums[i] == 2){
                twoCounter++;
            }
        }

        for(int i=0; i<oneCounter; i++){
            nums[k++] = 1;
        }

        for(int i=0; i<twoCounter; i++){
            nums[k++] = 2;
        }
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Approach 2: Dutch National Flag Algorithm

class Solution {
    public void sortColors(int[] nums) {
        int low = 0;
        int mid = 0;
        int high = nums.length-1;

        while(mid <= high){
            if(nums[mid] == 0){
                Collections.swap(nums, low, mid);
                low++;
                mid++;
            }
            else if(nums[mid] == 1){
                mid++;
            }
            else if(nums[mid] == 2){
                Collections.swap(nums, mid, high);
                high--;
            }
        }
    }
}
