287. Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and using only constant extra space.

Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [3,3,3,3,3]
Output: 3
 
Constraints:

1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Code:

Approach 1 (Naive): Sorting the array and finding the adjacent element.

class Solution {
    public int findDuplicate(int[] nums) {
        int size = nums.length;
        Arrays.sort(nums);
        for(int i=0 ; i<size-1; i++){
            if(nums[i] == nums[i+1]){
                return nums[i];
            }
        }
        return 0;
    }
}


Approach 2 (Better): Hashing method - using frequency array

class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
        int[] freq = new int[n+1];

        for(int i=0; i<n; i++){
            if(freq[nums[i]] == 0){
                freq[nums[i]]++;
            }
            else 
                return nums[i];
        }
        return 0;
    }
}

Approach 3 (Optimal): The Cycle Detection Algorithm (Floydâ€™s Tortoise and Hare Algorithm)

class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0]; // Tortoise
        int fast = nums[0]; // Hare

      // Phase 1: Detect the cycle
        do{
            slow = nums[slow];  // Move one step
            fast = nums[nums[fast]];  // Move two step
        }while(slow != fast);  // Continue until they meet

        // Phase 2: Find the duplicate number
        fast = nums[0];  // Reset fast to the start

        while(slow != fast){
            slow = nums[slow];  // Move one step
            fast = nums[fast];  // Move one step
        }
        return fast;  // Duplicate number found
    }
}
